#!/usr/bin/env python3

import os
import json

ascii_art = r'''

__________                      __
\______   \ ____   ____   _____/  |_  ____
 |       _// __ \ /    \ /  _ \   __\/ __ \
 |    |   \  ___/|   |  (  <_> )  | \  ___/
 |____|_  /\___  >___|  /\____/|__|  \___  >
        \/     \/     \/                 \/


'''

help = r'''

====================================================
Options

Type 'add usr <username>'   to add a username
Type 'rem usr <username>'   to remove a username
Type 'list usr'             to list all usernames

Type 'add ip <IP>'          to add an IP
Type 'rem ip <IP>'          to remove an IP
Type 'list ip'              to list all IPs

Type 'exit' to quit
====================================================

'''

current_directory = os.getcwd()
json_path = os.path.join(current_directory, 'notes.json')

notes_temp = '{ "ip":[], "user":[] }'

print(ascii_art)
print(help)

def add_item(item_type, item):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    if item is None:
        print("No note to add provided!")
        return

    if item in items[item_type]:
        print(f"Notes already contain this {item_type}!")
        return

    items[item_type].append(item)

    json_items = json.dumps(items, indent=4)
    with open(json_path, "r+") as json_file:
        json_file.write(json_items)

    print(f"{item_type} {item} added!")

def rem_item(item_type, item):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    if item is None:
        print("No note to remove provided!")
        return

    if item not in items[item_type]:
        print(f"Notes do not contain this {item_type}!")
        return

    items[item_type].remove(item)

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)

    print(f"{item_type} {item} removed!")

def list_items(item_type):
    print(f"{item_type}'s:")

    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    for item in items[item_type]:
        print(item)

    print()

def clear_items(item_type):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    items[item_type] = []

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)

    print(f"{item_type} notes cleared!")

def main():
    while True:
        try:
            if not os.path.exists(json_path):
                with open(json_path, "w") as new_json:
                    new_json.write(notes_temp)
                    print("New notebook created")

            command = input(">").strip()
            if command.lower() is "exit":
                break

            parts = command.split()
            if len(parts) < 2:
                continue

            print()

            action, item_type = parts[0].lower(), parts[1].lower()

            item = None
            if len(parts) > 2:
                item = parts[2]
            
            if action == "add":
                add_item(item_type, item)
            elif action == "rem":
                rem_item(item_type, item)
            elif action == "list":
                list_items(item_type)
            elif action == "clear":
                clear_items(item_type)

        except KeyboardInterrupt:
            break

if __name__ == "__main__":
    main()
