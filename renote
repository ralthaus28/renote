#!/usr/bin/env python3

import sys
import os
import json

ascii_art = r'''

__________                      __
\______   \ ____   ____   _____/  |_  ____
 |       _// __ \ /    \ /  _ \   __\/ __ \
 |    |   \  ___/|   |  (  <_> )  | \  ___/
 |____|_  /\___  >___|  /\____/|__|  \___  >
        \/     \/     \/                 \/


'''

help = r'''

====================================================
Options

Type 'add usr <username>'   to add a username
Type 'rem usr <username>'   to remove a username
Type 'list usr'             to list all usernames

Type 'add ip <IP>'          to add an IP
Type 'rem ip <IP>'          to remove an IP
Type 'list ip'              to list all IPs

Type 'exit' to quit
====================================================

'''

current_directory = os.getcwd()
json_path = os.path.join(current_directory, 'notes.json')

notes_temp = '{ }'

print(ascii_art)
print(help)

def add_item(item_type, item):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    if item is None:
        print("No note to add provided!")
        return

    if item in items[item_type]:
        print(f"Notes already contain this {item_type}!")
        return

    items[item_type].append(item)

    json_items = json.dumps(items, indent=4)
    with open(json_path, "r+") as json_file:
        json_file.write(json_items)

    print(f"{item_type} {item} added!")

def rem_item(item_type, item):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    if item is None:
        print("No note to remove provided!")
        return

    if item not in items[item_type]:
        print(f"Notes do not contain this {item_type}!")
        return

    items[item_type].remove(item)

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)

    print(f"{item_type} {item} removed!")

def list_items(item_type):
    print(f"{item_type}'s:")

    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type not in items:
        print(f"Notes do not contain any {item_type}'s")
        return

    for item in items[item_type]:
        print(item)

    print()

def clear_items(item_type):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)
    

    if item_type == '-all':
        print("Clearing all items!")
        for item in items:
            items[item] = []
    else:
        if item_type not in items:
            print(f"Notes do not contain any {item_type}'s")
            return
        items[item_type] = []

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)

    print(f"{item_type} notes cleared!")

def new_itemType(item_type):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)

    if item_type in items:
        print(f"Notes already contain {item_type}'s")
        return

    items[item_type] = []

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)
    
    print(f"New type created ({item_type})")

def del_itemType(item_type):
    with open(json_path, "r") as json_file:
        items = json.load(json_file)
    
    if item_type not in items:
        print(f"Notes do not contain {item_type}'s")
        return
    
    del items[item_type]

    json_items = json.dumps(items, indent=4)
    with open(json_path, "w") as json_file:
        json_file.write(json_items)

    print(f"Deleted {item_type}'s from notes")

def main():
    args = sys.argv[1:]

    if len(args) > 0:
        json_path = args[0]

        if not json_path.endswith(".json"):
            json_path += ".json"

        if not os.path.exists(json_path):
            answer = input("The specified file does not exist, do you want to create it? [Y/n]")
            if answer == "" or answer.lower() == "y":
                with open(json_path, "w") as new_json:
                    new_json.write(notes_temp)
            else:
                print("Exit!")
                return
    else:
        answer = input("Do you want to create a new notebook? [Y/n]")
        if answer != "" and answer.lower() != "y":
            print("Run 'renote' with a existing note (renote mynotes.json) or create a new one!")
            return

        json_path = input("What should be the name of the notebook?\n")

        if not json_path.endswith(".json"):
            json_path += ".json"

        if os.path.exists(json_path):
            print("This file already exists! Opening file...")
        else:
            with open(json_path, "w") as new_json:
                new_json.write(notes_temp)
            
    while True:
        try:
            if not os.path.exists(json_path):
                with open(json_path, "w") as new_json:
                    new_json.write(notes_temp)
                    print("New notebook created")

            command = input(">").strip()
            
            if command.lower() == "exit":
                break

            parts = command.split()
            if len(parts) < 2:
                continue

            print()

            action, subcommand = parts[0].lower(), parts[1].lower()

            subcommand2 = None
            if len(parts) > 2:
                subcommand2 = parts[2]

            
            if action == "add":
                add_item(subcommand, subcommand2)
            elif action == "rem":
                rem_item(subcommand, subcommand2)
            elif action == "list":
                list_items(subcommand)
            elif action == "clear":
                clear_items(subcommand)
            elif action == "new":
                if subcommand == "type":
                    new_itemType(subcommand2)
                else:
                    print("Not a valid subcommand")
            elif action == "del":
                if subcommand == 'type':
                    del_itemType(subcommand2)
                else:
                    print("Not a valid subcommand")

        except KeyboardInterrupt:
            break

if __name__ == "__main__":
    main()
